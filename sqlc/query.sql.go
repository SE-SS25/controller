// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteWorker = `-- name: DeleteWorker :exec
DELETE FROM WorkerMetrics WHERE uuid=$1
`

func (q *Queries) DeleteWorker(ctx context.Context, uuid pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteWorker, uuid)
	return err
}

const getControllerState = `-- name: GetControllerState :one
SELECT scaling, last_heartbeat FROM ControllerStatus
LIMIT 1
`

func (q *Queries) GetControllerState(ctx context.Context) (Controllerstatus, error) {
	row := q.db.QueryRow(ctx, getControllerState)
	var i Controllerstatus
	err := row.Scan(&i.Scaling, &i.LastHeartbeat)
	return i, err
}

const getDatabaseCount = `-- name: GetDatabaseCount :one
SELECT DISTINCT COUNT(url) FROM DatabaseMapping
`

func (q *Queries) GetDatabaseCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getDatabaseCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getWorkerCount = `-- name: GetWorkerCount :one
SELECT COUNT(uuid) FROM WorkerMetrics
`

func (q *Queries) GetWorkerCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getWorkerCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getWorkerState = `-- name: GetWorkerState :many
SELECT uuid, last_heartbeat, uptime, req_per_sec, write_per_sec, read_per_sec, req_total, req_failed, db_availability FROM WorkerMetrics
`

func (q *Queries) GetWorkerState(ctx context.Context) ([]Workermetric, error) {
	rows, err := q.db.Query(ctx, getWorkerState)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workermetric
	for rows.Next() {
		var i Workermetric
		if err := rows.Scan(
			&i.Uuid,
			&i.LastHeartbeat,
			&i.Uptime,
			&i.ReqPerSec,
			&i.WritePerSec,
			&i.ReadPerSec,
			&i.ReqTotal,
			&i.ReqFailed,
			&i.DbAvailability,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
